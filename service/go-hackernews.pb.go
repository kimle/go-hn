// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go-hackernews.proto

/*
Package gohackernews is a generated protocol buffer package.

It is generated from these files:
	go-hackernews.proto

It has these top-level messages:
	Story
	TopStories
	Stories
	Amount
	Ids
*/
package gohackernews

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Story struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Url   string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (m *Story) Reset()                    { *m = Story{} }
func (m *Story) String() string            { return proto.CompactTextString(m) }
func (*Story) ProtoMessage()               {}
func (*Story) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Story) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Story) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Story) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type TopStories struct {
	TopStories []*Story `protobuf:"bytes,1,rep,name=topStories" json:"topStories,omitempty"`
}

func (m *TopStories) Reset()                    { *m = TopStories{} }
func (m *TopStories) String() string            { return proto.CompactTextString(m) }
func (*TopStories) ProtoMessage()               {}
func (*TopStories) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TopStories) GetTopStories() []*Story {
	if m != nil {
		return m.TopStories
	}
	return nil
}

type Stories struct {
	Stories []*Story `protobuf:"bytes,1,rep,name=stories" json:"stories,omitempty"`
}

func (m *Stories) Reset()                    { *m = Stories{} }
func (m *Stories) String() string            { return proto.CompactTextString(m) }
func (*Stories) ProtoMessage()               {}
func (*Stories) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Stories) GetStories() []*Story {
	if m != nil {
		return m.Stories
	}
	return nil
}

type Amount struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *Amount) Reset()                    { *m = Amount{} }
func (m *Amount) String() string            { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()               {}
func (*Amount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Amount) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Ids struct {
	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ids) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*Story)(nil), "gohackernews.Story")
	proto.RegisterType((*TopStories)(nil), "gohackernews.TopStories")
	proto.RegisterType((*Stories)(nil), "gohackernews.Stories")
	proto.RegisterType((*Amount)(nil), "gohackernews.Amount")
	proto.RegisterType((*Ids)(nil), "gohackernews.Ids")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	GetStory(ctx context.Context, in *TopStories, opts ...grpc.CallOption) (*Story, error)
	GetStories(ctx context.Context, in *TopStories, opts ...grpc.CallOption) (*Stories, error)
	GetIds(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*Ids, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) GetStory(ctx context.Context, in *TopStories, opts ...grpc.CallOption) (*Story, error) {
	out := new(Story)
	err := grpc.Invoke(ctx, "/gohackernews.Test/GetStory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) GetStories(ctx context.Context, in *TopStories, opts ...grpc.CallOption) (*Stories, error) {
	out := new(Stories)
	err := grpc.Invoke(ctx, "/gohackernews.Test/GetStories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) GetIds(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := grpc.Invoke(ctx, "/gohackernews.Test/GetIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	GetStory(context.Context, *TopStories) (*Story, error)
	GetStories(context.Context, *TopStories) (*Stories, error)
	GetIds(context.Context, *Amount) (*Ids, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gohackernews.Test/GetStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).GetStory(ctx, req.(*TopStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_GetStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopStories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).GetStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gohackernews.Test/GetStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).GetStories(ctx, req.(*TopStories))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_GetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).GetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gohackernews.Test/GetIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).GetIds(ctx, req.(*Amount))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gohackernews.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStory",
			Handler:    _Test_GetStory_Handler,
		},
		{
			MethodName: "GetStories",
			Handler:    _Test_GetStories_Handler,
		},
		{
			MethodName: "GetIds",
			Handler:    _Test_GetIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-hackernews.proto",
}

func init() { proto.RegisterFile("go-hackernews.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x8c, 0x13, 0x92, 0xc2, 0x81, 0x10, 0xb8, 0x05, 0xac, 0x4e, 0x91, 0xa7, 0x2c, 0xcd, 0xd0,
	0x2c, 0x48, 0x0c, 0x55, 0xa7, 0xaa, 0x6b, 0xe8, 0x0f, 0x14, 0x6c, 0x15, 0x8b, 0x52, 0x57, 0xf1,
	0xab, 0x10, 0x9f, 0xc6, 0xdf, 0x21, 0x27, 0x29, 0x6d, 0x04, 0x88, 0xed, 0xbd, 0xd3, 0xdd, 0xbb,
	0x3b, 0x1b, 0xfd, 0x95, 0x1d, 0xbd, 0x2c, 0x9f, 0x5f, 0x75, 0xb5, 0xd1, 0xef, 0x2e, 0xdf, 0x56,
	0x96, 0x2c, 0xbf, 0x58, 0xd9, 0x03, 0x26, 0x27, 0x88, 0x1f, 0xc9, 0x56, 0x1f, 0xfc, 0x12, 0xa1,
	0x51, 0x82, 0xa5, 0x2c, 0x8b, 0xcb, 0xd0, 0x28, 0x3e, 0x40, 0x4c, 0x86, 0xd6, 0x5a, 0x84, 0x29,
	0xcb, 0xce, 0xca, 0x66, 0xe1, 0x57, 0x88, 0x76, 0xd5, 0x5a, 0x44, 0x35, 0xe6, 0x47, 0x39, 0x05,
	0x16, 0x76, 0xeb, 0x6f, 0x18, 0xed, 0x78, 0x01, 0xd0, 0xf7, 0x26, 0x58, 0x1a, 0x65, 0xe7, 0xe3,
	0x7e, 0x7e, 0xec, 0x98, 0xd7, 0x76, 0xe5, 0x11, 0x4d, 0xde, 0xa3, 0xb7, 0xd7, 0x8f, 0xd0, 0x73,
	0xff, 0x8b, 0xf7, 0x1c, 0x99, 0x22, 0x99, 0xbe, 0xd9, 0xdd, 0x86, 0xf8, 0x2d, 0x92, 0x65, 0x3d,
	0xb5, 0x15, 0xda, 0x4d, 0xde, 0x21, 0x9a, 0x2b, 0xe7, 0x73, 0x1b, 0xd5, 0xdc, 0x8c, 0x4b, 0x3f,
	0x8e, 0x3f, 0x19, 0x4e, 0x16, 0xda, 0x11, 0x7f, 0xc0, 0xe9, 0x4c, 0x53, 0xf3, 0x08, 0xa2, 0xeb,
	0x76, 0x28, 0x36, 0xfc, 0x2d, 0x87, 0x0c, 0xf8, 0x04, 0x68, 0xc5, 0x3e, 0xfd, 0xdf, 0xf2, 0x9b,
	0x9f, 0x72, 0x9f, 0x3f, 0xe0, 0x05, 0x92, 0x99, 0x26, 0x1f, 0x71, 0xd0, 0xa5, 0x34, 0xbd, 0x86,
	0xd7, 0x5d, 0x74, 0xae, 0x9c, 0x0c, 0x9e, 0x92, 0xfa, 0x27, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x88, 0x9b, 0x37, 0x03, 0xe0, 0x01, 0x00, 0x00,
}
